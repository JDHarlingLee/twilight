geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(4,"Set2"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
basesize = 14
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1")) + xlab("") + ylab("Unfit HMM hits") +
scale_fill_discrete(breaks=c("Downstream length","Hit Length","Delta","Upstream Length"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1")) + xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"),breaks=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"),labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("#Filtered HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Filtered HMM hits")
unfit_RND =  read.table("/Users/gh11/posh/e_coli_collection/RND_pump_flex/unfit/1UNFIT_(1H).txt",
sep=",",stringsAsFactors = F, header = T)
View(unfit_RND)
which(unfit_RND$Reason1 == "hit length")
length(which(unfit_RND$Reason1 == "hit length"))
length(which(unfit_RND$Reason1 == "Upstream length"))
length(which(unfit_RND$Reason1 == "No adjacent upstream ORF"))
unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")]
hist(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
max(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
min(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/combo_matrix.txt",
sep=",",header=T,row.names = 1)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1,comment.char = "")
View(toxins)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1,comment.char = "")
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE, tol = 0)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE, tol = sqrt(.Machine$double.eps))
toxins[,sapply(toxins, function(v) var(v, na.rm=TRUE)!=0)]
toxins_test = toxins[,sapply(toxins, function(v) var(v, na.rm=TRUE)!=0)]
toxins.pca = prcomp(toxins_test,center = TRUE, scale. = TRUE)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16)
metadata = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/metadata.csv",sep=",",header = T, comment.char = "")
metadata$Strain
metadata = metadata[match(rownames(toxins.pca$x),metadata$Strain),]
col_array = brewer.pal(4,"Set2")
library(RColorBrewer)
col_array = brewer.pal(4,"Set2")
col = as.character(unlist(metadata$Phylogroup))
col
col = replace(col, col=="kpi", col_array[1])
col = replace(col, col=="kpii", col_array[2])
col = replace(col, col=="kpiii", col_array[3])
col = replace(col, col=="kpiv", col_array[4])
col
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array,pch=16)
plot(toxins.pca$x[,c(2,3)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array,pch=16)
plot(toxins.pca$x[,c(1,3)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,4)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,1)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(2,1)],cex=1.2,lwd=2,pch=16,col = col)
display.brewer.all(5)
display.brewer.all(10)
display.brewer.all(8)
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Phylogroup))
col = replace(col, col=="kpi", col_array[1])
col = replace(col, col=="kpii", col_array[3])
col = replace(col, col=="kpiii", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(2,1)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
col = as.character(unlist(metadata$Acquisition))
col
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Acquisition))
col = replace(col, col=="nosocomial", col_array[1])
col = replace(col, col=="community", col_array[3])
col = replace(col, col=="unknown", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(2,3)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,4)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(4,5)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
toxins[,1]
View(toxins)
plot(toxins[,1])
read.newick()
install.packages("phytools")
library(phytools)
read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree = read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree$tip.label
tree$node.label
tree$edge.length
plot(tree)
tree$edge.length
dim(tree$edge.length)
length(tree$edge.length)
tree$Nnode
tree$edge
dim(tree$edge)
length(tree$edge.length)
edges = cbind(tree$edge,tree$edge.length)
View(edges)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges)
header(edges)
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node_1","Node_2", "Weight")
mrca = mrca(tree)
mrca
dim(mrca)
mrca[1,]
mrca[2,]
mrca[3,]
mrca[4,]
mrca = mrca(tree,full=TRUE)
mrca[1,]
mrca
dim(mrca)
dim(toxins)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260,rownames = metadata$Strain)
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = metadata$Strain
col.names(TA_dist_mat) = metadata$Strain
colnames(TA_dist_mat) = metadata$Strain
View(TA_dist_mat)
View(toxins)
i = 1
j = 2
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
strain1
strain2
dist = toxins[i,] - toxins[j,]
dist
dist = abs(toxins[i,] - toxins[j,])
dist
dist = sum(abs(toxins[i,] - toxins[j,]))
dist
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = rownames(toxins)
colnames(TA_dist_mat) = rownames(toxins)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j]
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
print(dist)
}
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
TA_dist_mat[j,i] = dist
}
}
}
View(TA_dist_mat)
hist(lower.tri(TA_dist_mat))
hist(as.numeric(unlist(lower.tri(TA_dist_mat))))
lower.tri(TA_dist_mat)
hist(as.numeric(unlist(lower.tri(TA_dist_mat[TA_dist_mat]))))
TA_dist_mat[lower.tri(TA_dist_mat)
]
hist(as.numeric(unlist(TA_dist_mat[lower.tri(TA_dist_mat)])))
hist(as.numeric(unlist(TA_dist_mat)), main = "Distance between every two strains", xlab="Distance")
order = read.table("/Users/gh11/Desktop/new phd prop/order.txt",sep="",comment.char = "")
View(order)
t = rnorm(n = 1000,mean = 100, sd = 10)
hist(t, xlab = "Length",main="", breaks = 25)
install.packages('scatterpie')
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
View(klebs)
unique(klebs$ST..MLST.)
length(unique(klebs$ST..MLST.))
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
unique(klebs$taxonomic_designation)
klebs_species = unique(klebs$taxonomic_designation)
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
klebs_species = unique(klebs$taxonomic_designation)
for (s in klebs_species) {
curr = klebs[klebs$taxonomic_designation == s,]
print(s)
print(length(unique(curr$ST..MLST.)))
}
shiny::runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
eggnog = read.table(file = "/Users/gh11/poppunk_pangenome/9_gene_properties/eggnog/eggnog_results.emapper.annotations", sep = "\t",
header = F, stringsAsFactors = F)
eggnog = read.table(file = "/Users/gh11/poppunk_pangenome/9_gene_properties/eggnog/eggnog_results.emapper.annotations", sep = "\t",
header = F, stringsAsFactors = F, quote = "")
View(eggnog)
all_genes = read.table("/Users/gh11/poppunk_pangenome/5_classify_genes/classification_v2.csv", sep = "\t", comment.char = "",
stringsAsFactors = F, quote = "", header = T)
with_annot = all_genes$gene[which(all_genes$gene %in% eggnog)]
View(eggnog)
with_annot = all_genes$gene[which(all_genes$gene %in% eggnog$V1)]
eggnog = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",]
with_annot = all_genes$gene[which(all_genes$gene %in% eggnog$V1)]
eggnog = read.table(file = "/Users/gh11/poppunk_pangenome/9_gene_properties/eggnog/eggnog_results.emapper.annotations", sep = "\t",
header = F, stringsAsFactors = F, quote = "")
eggnog_annotated = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",] ## there are only 17,396 that are properly characterised
well_annotated = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",] ## there are only 17,396 that are properly characterised
well_annotated = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",]$V1 ## there are only 17,396 that are properly characterised
poorly_characterised = eggnog[eggnog$V12 == "S",]$V1
not_annotated = all_genes[which(!all_genes$gene %in% c(well_annotated, poorly_characterised))]
all_genes$gene %in% c(well_annotated, poorly_characterised)
not_annotated = all_genes$gene[which(!all_genes$gene %in% c(well_annotated, poorly_characterised))]
setwd("/Users/gh11/Submissions/my_thesis/Chapter5/prep_v2/corrections/check_functions/")
## load the blast results
k12 = read.table(file = "results.out", sep = "\t", header = F, stringsAsFactors = F, quote = "")
View(k12)
k12[1,]
k12[90,]
colnames(k12) = c("k12","helicon","ident","alignment_length","k12_length","helicon_length","eval","bitscore")
data.frame(k12$k12_length/k12$alignment_length, k12$helicon_length/k12$alignment_length)
min(data.frame(k12$k12_length/k12$alignment_length, k12$helicon_length/k12$alignment_length))
pmin(data.frame(k12$k12_length/k12$alignment_length, k12$helicon_length/k12$alignment_length))
apply(data.frame(k12$k12_length/k12$alignment_length, k12$helicon_length/k12$alignment_length),1, min)
data.frame(k12$alignment_length/k12$k12_length, k12$alignment_length/k12$helicon_length)
apply(data.frame(k12$alignment_length/k12$k12_length, k12$alignment_length/k12$helicon_length),1, min)
k12$coverage = apply(data.frame(k12$alignment_length/k12$k12_length, k12$alignment_length/k12$helicon_length),1, min)
plot(hist(k12$coverage))
abline(v = 0.7)
abline(v = 0.7, color = "red")
abline(v = 0.7, col = "red")
plot(hist(k12$ident))
abline(v = 70, col = 'red')
plot(k12$coverage, k12$ident)
abline(v = 60, col = 'red')
plot(hist(k12$ident))
abline(v = 60, col = 'red')
k12 = k12[k12$coverage >= 0.7 & k12$ident >= 60,]
unique(k12$helicon)
length(unique(k12$helicon))
k12_genes = unique(k12$helicon)
## build a table that looks at all the combinations
summary = data.frame(matrix(nrow = 2, ncol = 3, data = 0), stringsAsFactors = F)
View(summary)
rownames(summary) = c("k12","not_k12")
colnames(summary) = c("well", "poorly","not")
intersect(k12_genes, well_annotated)
## three categories of genes
well_annotated = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",]$V1 ## there are only 17,396 that are properly characterised
poorly_characterised = eggnog[eggnog$V12 == "S",]$V1
not_annotated = all_genes$gene[which(!all_genes$gene %in% c(well_annotated, poorly_characterised))]
## Load the eggnog results, see how many genes are in E. coli K-12 and have vs dont have a function
## How many aren't in eggnog and dont have/ have an annotation
setwd("/Users/gh11/Submissions/my_thesis/Chapter5/prep_v2/corrections/check_functions/")
all_genes = read.table("/Users/gh11/poppunk_pangenome/5_classify_genes/classification_v2.csv", sep = "\t", comment.char = "",
stringsAsFactors = F, quote = "", header = T)
eggnog = read.table(file = "/Users/gh11/poppunk_pangenome/9_gene_properties/eggnog/eggnog_results.emapper.annotations", sep = "\t",
header = F, stringsAsFactors = F, quote = "")
## three categories of genes
well_annotated = eggnog[eggnog$V12 != "S" & eggnog$V12 != "",]$V1 ## there are only 17,396 that are properly characterised
poorly_characterised = eggnog[eggnog$V12 == "S",]$V1
not_annotated = all_genes$gene[which(!all_genes$gene %in% c(well_annotated, poorly_characterised))]
intersect(k12_genes, well_annotated)
summary[1,1] = length(intersect(k12_genes, well_annotated))
not_k12_genes = all_genes$gene[!all_genes$gene %in% k12_genes]
summary[1,1] = length(intersect(k12_genes, well_annotated))
## build a table that looks at all the combinations
summary = data.frame(matrix(nrow = 2, ncol = 3, data = 0), stringsAsFactors = F)
rownames(summary) = c("k12","not_k12")
colnames(summary) = c("well", "poorly","not")
summary[1,1] = length(intersect(k12_genes, well_annotated))
summary[1,2] = length(intersect(k12_genes, poorly_characterised))
summary[1,3] = length(intersect(k12_genes, not_annotated))
summary[2,1] = length(intersect(not_k12_genes, well_annotated))
summary[2,2] = length(intersect(not_k12_genes, poorly_characterised))
summary[2,3] = length(intersect(not_k12_genes, not_annotated))
chisq.test(summary)
summary(chisq.test(summary))
rowSums(summary)
# Calculate marginal probabilities
margcol <- colSums(summary) / sum(summary)
margrow <- rowSums(summary) / sum(summary)
# Empty data frame for holding expected probabilities
expProb <- data.frame()
#Loop to fill in data frame
for (i in 1:3){
expProb[1,i] <- (margcol[i] * margrow[1])
expProb[2,i] <- (margcol[i] * margrow[2])
expProb[3,i] <- (margcol[i] * margrow[3])
}
# Print expected probabilities
expProb
# Calculate marginal probabilities
margcol <- colSums(summary) / sum(summary)
margrow <- rowSums(summary) / sum(summary)
# Empty data frame for holding expected probabilities
expProb <- data.frame()
#Loop to fill in data frame
for (i in 1:3){
expProb[1,i] <- (margcol[i] * margrow[1])
expProb[2,i] <- (margcol[i] * margrow[2])
}
# Print expected probabilities
expProb
length(not_k12_genes)
13324/50039
length(k12)
length(k12_genes)
247/length(k12_genes)
1372/length(k12_genes)
13324/ length(not_k12_genes)
8987/ length(not_k12_genes)
4071/length(k12_genes)
write.table(k12_genes, file = "k12_genes.txt", quote = F, col.names = F, row.names = F)
library(ggplot2)
library(dplyr)
library(stringr)
setwd("/Users/gh11/poppunk_pangenome/9_gene_properties/eggnog/")
cogs = read.csv("eggnog_results.emapper.annotations", sep = "\t",stringsAsFactors = F, header = F, comment.char = "#")
cogs_desc = read.csv("cog_descs.csv", sep = ",", comment.char = "", stringsAsFactors = F, quote = "", header = T)
cogs_desc$Title = str_wrap(cogs_desc$Title, width = 10)
class_desc = read.csv(file = "../../5_classify_genes/colours_v2.csv", sep = ",", comment.char = "",
stringsAsFactors = F, header = T)
classification = read.table("../../5_classify_genes/classification_v2.csv", sep = "\t", comment.char = "",
stringsAsFactors = F, header = T, quote = "")
classification$COG = cogs$V12[match(classification$gene, cogs$V1)]
classification$COG[is.na(classification$COG) | classification$COG == ""] = "?"
classification$Title = cogs_desc$Title[match(classification$COG, cogs_desc$COG)]
classification = classification[-which(!classification$COG %in% cogs_desc$COG),]
## by fraction of genes from each class rather than pure counts
counts  = table(classification$fill, classification$COG)
counts = counts/ rowSums(counts)
counts = data.frame(counts, stringsAsFactors = F)
counts$Title = cogs_desc$Title[match(counts$Var2, cogs_desc$COG)]
counts = cbind(counts, class_desc[match(counts$Var1, class_desc$Class),])
counts$Var1 = factor(counts$Var1, class_desc$Class)
counts$Main.Class = factor(counts$Main.Class, unique(class_desc$Main.Class))
counts$Var2 = factor(counts$Var2, cogs_desc$COG)
counts$Title = factor(counts$Title, unique(cogs_desc$Title))
ggplot(counts, aes(x = Var1, y = Freq, fill = Var2)) + geom_bar(stat = "identity", color = "black", lwd = 0.2) +
facet_grid(Title~Main.Class, scales = "free",  space = "free_x",switch = "both") +
scale_fill_manual(values = cogs_desc$Col, name = "") + theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Occurrence class") + ylab("Fraction of genes")
ccount()
counts
## do something similar for in or not in K-12
k12_genes = read.table("/Users/gh11/Submissions/my_thesis/Chapter5/prep_v2/corrections/check_functions/k12_genes.txt",
header = F, stringsAsFactors = F)
kk12_genes
k12_genes
## do something similar for in or not in K-12
k12_genes = read.table("/Users/gh11/Submissions/my_thesis/Chapter5/prep_v2/corrections/check_functions/k12_genes.txt",
header = F, stringsAsFactors = F)[,1]
k12_genes
classification$k12 = rep("no",dim(classification)[1])
classification$k12[classification$gene %in% k12_genes] = "yes"
counts  = table(classification$k12, classification$COG)
counts = counts/ rowSums(counts)
counts = data.frame(counts, stringsAsFactors = F)
counts
counts = cbind(counts, class_desc[match(counts$Var1, class_desc$Class),])
counts
counts = cbind(counts, class_desc[match(counts$Var2, class_desc$Class),])
counts
match(counts$Var2, class_desc$Class),]
counts$Var2
class_desc$Class
counts  = table(classification$fill, classification$k12)
counts = counts/ rowSums(counts)
counts = data.frame(counts, stringsAsFactors = F)
counts$Title = cogs_desc$Title[match(counts$Var2, cogs_desc$COG)]
counts = cbind(counts, class_desc[match(counts$Var1, class_desc$Class),])
counts
counts$Var1 = factor(counts$Var1, class_desc$Class)
counts$Main.Class = factor(counts$Main.Class, unique(class_desc$Main.Class))
counts
## by fraction of genes from each class rather than pure counts
counts  = table(classification$fill, classification$COG, classification$k12)
counts = counts/ rowSums(counts)
counts = data.frame(counts, stringsAsFactors = F)
counts$Title = cogs_desc$Title[match(counts$Var2, cogs_desc$COG)]
counts = cbind(counts, class_desc[match(counts$Var1, class_desc$Class),])
counts$Var1 = factor(counts$Var1, class_desc$Class)
counts$Main.Class = factor(counts$Main.Class, unique(class_desc$Main.Class))
counts$Var2 = factor(counts$Var2, cogs_desc$COG)
counts$Title = factor(counts$Title, unique(cogs_desc$Title))
ggplot(counts, aes(x = Var1, y = Freq, fill = Var2)) + geom_bar(stat = "identity", color = "black", lwd = 0.2) +
facet_grid(Title~Main.Class, scales = "free",  space = "free_x",switch = "both") +
scale_fill_manual(values = cogs_desc$Col, name = "") + theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Occurrence class") + ylab("Fraction of genes")
counts
ggplot(counts, aes(x = Var1, y = Freq, fill = Var3)) + geom_bar(stat = "identity",  lwd = 0.2) +
facet_grid(Title~Main.Class, scales = "free",  space = "free_x",switch = "both") +
scale_fill_brewer(palette = "Set2", name = "") + theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Occurrence class") + ylab("Fraction of genes")
ggplot(counts, aes(x = Var1, y = Freq, fill = Var3)) + geom_bar(stat = "identity",  lwd = 0.2) +
facet_grid(Title~Main.Class, scales = "free",  space = "free_x",switch = "both") +
scale_fill_brewer(palette = "Set2", name = "In K-12?") + theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Occurrence class") + ylab("Fraction of genes")
