display.brewer.all(5)
display.brewer.all(10)
display.brewer.all(8)
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Phylogroup))
col = replace(col, col=="kpi", col_array[1])
col = replace(col, col=="kpii", col_array[3])
col = replace(col, col=="kpiii", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(2,1)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
col = as.character(unlist(metadata$Acquisition))
col
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Acquisition))
col = replace(col, col=="nosocomial", col_array[1])
col = replace(col, col=="community", col_array[3])
col = replace(col, col=="unknown", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(2,3)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,4)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(4,5)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
toxins[,1]
View(toxins)
plot(toxins[,1])
read.newick()
install.packages("phytools")
library(phytools)
read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree = read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree$tip.label
tree$node.label
tree$edge.length
plot(tree)
tree$edge.length
dim(tree$edge.length)
length(tree$edge.length)
tree$Nnode
tree$edge
dim(tree$edge)
length(tree$edge.length)
edges = cbind(tree$edge,tree$edge.length)
View(edges)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges)
header(edges)
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node_1","Node_2", "Weight")
mrca = mrca(tree)
mrca
dim(mrca)
mrca[1,]
mrca[2,]
mrca[3,]
mrca[4,]
mrca = mrca(tree,full=TRUE)
mrca[1,]
mrca
dim(mrca)
dim(toxins)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260,rownames = metadata$Strain)
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = metadata$Strain
col.names(TA_dist_mat) = metadata$Strain
colnames(TA_dist_mat) = metadata$Strain
View(TA_dist_mat)
View(toxins)
i = 1
j = 2
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
strain1
strain2
dist = toxins[i,] - toxins[j,]
dist
dist = abs(toxins[i,] - toxins[j,])
dist
dist = sum(abs(toxins[i,] - toxins[j,]))
dist
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = rownames(toxins)
colnames(TA_dist_mat) = rownames(toxins)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j]
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
print(dist)
}
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
TA_dist_mat[j,i] = dist
}
}
}
View(TA_dist_mat)
hist(lower.tri(TA_dist_mat))
hist(as.numeric(unlist(lower.tri(TA_dist_mat))))
lower.tri(TA_dist_mat)
hist(as.numeric(unlist(lower.tri(TA_dist_mat[TA_dist_mat]))))
TA_dist_mat[lower.tri(TA_dist_mat)
]
hist(as.numeric(unlist(TA_dist_mat[lower.tri(TA_dist_mat)])))
hist(as.numeric(unlist(TA_dist_mat)), main = "Distance between every two strains", xlab="Distance")
order = read.table("/Users/gh11/Desktop/new phd prop/order.txt",sep="",comment.char = "")
View(order)
t = rnorm(n = 1000,mean = 100, sd = 10)
hist(t, xlab = "Length",main="", breaks = 25)
install.packages('scatterpie')
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
View(klebs)
unique(klebs$ST..MLST.)
length(unique(klebs$ST..MLST.))
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
unique(klebs$taxonomic_designation)
klebs_species = unique(klebs$taxonomic_designation)
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
klebs_species = unique(klebs$taxonomic_designation)
for (s in klebs_species) {
curr = klebs[klebs$taxonomic_designation == s,]
print(s)
print(length(unique(curr$ST..MLST.)))
}
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
library(reshape2)
library(igraph)
library(ape)
library(ggtree)
library(stringr)
library(gridExtra)
library(scatterplot3d)
library(harrietr)
setwd("/Users/gh11/poppunk_pangenome/10_gene_sharing/")
tree = read.tree("../7_AMR_vir_plasmid/smaller_tree/raxml_tree_mod.nwk")
tree = root(tree,outgroup = "NC_011740")
tree = drop.tip(tree, tip =  "NC_011740")
for (i in c(21,43,49)){
tree = drop.tip(tree, tip =  as.character(i))
}
## get the distance between every two nodes
distance_matrix <-cophenetic(tree)
distance_matrix.m = melt_dist(distance_matrix)
distance_matrix.m$label = paste(distance_matrix.m$iso1, distance_matrix.m$iso2, sep = "-")
cluster_graphics = read.table("/Users/gh11/Submissions/my_thesis/Chapter4/figures/cluster_graphics.csv",
sep = ",", comment.char = "", stringsAsFactors = F, header = T)
### NETWORK ANALYSIS
### FUNCTIONS ###
get_lower_tri<-function(m){
m[upper.tri(m)] <- NA
return(m)
}
reorder_matrix <- function(m){
hc <- hclust(dist(m))
m <-m[hc$order, hc$order]
return(m)
}
plot_matrix <- function(m, legend){
m <- reorder_matrix(m)
lower_tri = get_lower_tri(m)
#  lower_tri[which(lower_tri == 0)] = NA
melted_m <- melt(lower_tri, na.rm = TRUE)
melted_m$Var1 = factor(melted_m$Var1, melted_m$Var1[1:length(unique(melted_m$Var1))])
melted_m$Var2 = factor(melted_m$Var2, melted_m$Var1[1:length(unique(melted_m$Var1))])
p = ggplot(data = melted_m, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black")+
scale_fill_gradient( low = "white", high = "blue", space = "Lab", name = legend) +
theme_bw(base_size = 16)+
coord_fixed() + xlab("Cluster") + ylab("Cluster") + theme(axis.text.x = element_text(angle = 90, vjust = 1))
return (p)
}
swap_values_with_cols <- function(vec){
num_cols = length(unique(vec))
cols = brewer.pal(12, "Paired")
vec_to_return = as.character(vec)
i = 1
for (value in unique(vec)){
vec_to_return[which(vec == value)] = cols[i]
i = i + 1
}
return(vec_to_return)
}
generate_one_plot <- function(column) {
df = pca_x
colnames(df)[which(colnames(df) == column)] = "property"
p = ggplot(df, aes(x = PC1, y = PC2, fill = property, color = property, Label = Label)) +
geom_text(aes(label = Label), size=5,
fontface = "bold",position=position_jitter(width=0.2,height=0.2, seed = 1),
hjust = -0.3, vjust = 0.4) +
geom_jitter(pch = 21, size = 2, position = position_jitter(width=0.2,height=0.2,seed = 1)) +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Paired", name = column) + scale_color_brewer(palette = "Paired", guide = F) +
theme(legend.position = "bottom") + guides(fill=guide_legend(ncol=2))
pdf(paste("plots_v2/",gene_class,"_",column,"_3d.pdf",sep=""))
s3d = scatterplot3d(x = pca_x$PC1, y = pca_x$PC2, z = pca_x$PC3, axis = T, color = swap_values_with_cols(df$property), pch = 16, grid = F,
xlab = "PC1", ylab = "PC2", zlab = "PC3", main = column)
text(s3d$xyz.convert(pca_x$PC1, pca_x$PC2, pca_x$PC3), labels=pca_x$Label, pos=1,  col= swap_values_with_cols(df$property))
dev.off()
return(p)
}
plot_one_genetype_against_dist <- function(gene_type, title, get_legend = F) {
## plot the number of genes shared compared to phylogenetic distance
all = edges[which(edges$Gene_class == gene_type),]
all$label_a = paste(all$ClusterA, all$ClusterB, sep = "-")
all$label_b = paste(all$ClusterB, all$ClusterA, sep = "-")
all$label = rep("", dim(all)[1])
all$label[which(all$label_a %in% distance_matrix.m$label)] = all$label_a[which(all$label_a %in% distance_matrix.m$label)]
all$label[which(all$label_b %in% distance_matrix.m$label)] = all$label_b[which(all$label_b %in% distance_matrix.m$label)]
all = all[match(distance_matrix.m$label, all$label),]
all$distance = distance_matrix.m$dist
all$Count_normalised = (all$Count - min(all$Count)) /(max(all$Count) - min(all$Count))
all$phylo = factor(all$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
all$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
ggplot(all, aes(x = distance, y = Count, fill = phylo)) + geom_point(size = 3, pch = 21, alpha = 0.7) +
xlab("Phylogenetic distance") + ylab("Number of shared genes") +
theme_bw(base_size = 14)  +
scale_fill_manual(values = c(brewer.pal(n=7,"Set2"),"brown","#d3d3d3"),name = "", drop = F) + ggtitle(title) +
facet_grid(. ~ name) +
theme(strip.background = element_rect(fill=max_colour),
strip.text = element_text(size=12, colour=text_colour)) + theme(legend.position = "bottom") + guides(fill=guide_legend(ncol=3,byrow=F))
if (!get_legend) {p = p + theme(legend.position = "None")}
return(p)
}
plot_one_genetype_against_min_size <-  function(gene_type, title, get_legend = F){
curr = edges[edges$Gene_class == gene_type,]
curr$phylo = factor(curr$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
curr$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
p = ggplot(curr, aes(x = min, y = Count, fill = phylo)) + geom_point(size = 3, pch = 21, alpha = 0.9) +
xlab("Smaller cluster size") + ylab("Shared genes") +
theme_bw(base_size = 14) + ggtitle(gene_type) + scale_fill_manual(values = c(brewer.pal(n=7,"Set2"),"brown","#d3d3d3"),
drop = F)+
ggtitle(title)+
facet_grid(. ~ name) +
theme(strip.background = element_rect(fill=max_colour),
strip.text = element_text(size=12, colour=text_colour))
if (!get_legend) {p = p + theme(legend.position = "None")}
return(p)
}
### MAIN ###
edges = read.table("num_shared_gene_v2.csv", sep = "\t", comment.char = "",
stringsAsFactors = F, quote = "", header = T)
clusters_md = read.table("/Users/gh11/Submissions/my_thesis/Chapter4/figures/cluster_graphics.csv", sep = ",",
comment.char = "", stringsAsFactors = F, quote = "", header = T)
more_md = read.csv("/Users/gh11/Submissions/my_thesis/Chapter4/figures_thesis/ecoli_cluster_summary.csv", sep = ",",
stringsAsFactors = F, header = T, comment.char = "")
more_md = more_md[match(clusters_md$Cluster, more_md$Cluster),]
clusters_md = cbind(clusters_md, ST = more_md$Prevalent.ST, MDR = more_md$MDR, Pathotype = more_md$Pathotype, Virulence = more_md$Hypervirulent)
## Get the cluster sizes
cluster_sizes = read.table("../2_dists_roary_analysis/cluster_sizes_updated.csv", sep = ",", comment.char = "", header = T,stringsAsFactors = F)
edges$sizeA = cluster_sizes$Size[match(edges$ClusterA, cluster_sizes$Cluster)]
edges$sizeB = cluster_sizes$Size[match(edges$ClusterB, cluster_sizes$Cluster)]
edges  = transform(edges, min = pmin(edges$sizeA , edges$sizeB))
## add phylogroup info
edges$phyloA = cluster_graphics$Phylogroup[match(edges$ClusterA, cluster_graphics$Cluster)]
edges$phyloB = cluster_graphics$Phylogroup[match(edges$ClusterB, cluster_graphics$Cluster)]
edges$phylo = rep("Different", dim(edges)[1])
edges$phylo[which(edges$phyloA == edges$phyloB)] = edges$phyloA[which(edges$phyloA == edges$phyloB)]
## Run on one gene_type
all_classes = unique(edges$Gene_class)
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
core
core = plot_one_genetype_against_dist("Multi-cluster core", "A",get_legend = T)
gene_type = "Core"
## plot the number of genes shared compared to phylogenetic distance
all = edges[which(edges$Gene_class == gene_type),]
all$label_a = paste(all$ClusterA, all$ClusterB, sep = "-")
all$label_b = paste(all$ClusterB, all$ClusterA, sep = "-")
all$label = rep("", dim(all)[1])
all$label[which(all$label_a %in% distance_matrix.m$label)] = all$label_a[which(all$label_a %in% distance_matrix.m$label)]
all$label[which(all$label_b %in% distance_matrix.m$label)] = all$label_b[which(all$label_b %in% distance_matrix.m$label)]
all = all[match(distance_matrix.m$label, all$label),]
all$distance = distance_matrix.m$dist
all$Count_normalised = (all$Count - min(all$Count)) /(max(all$Count) - min(all$Count))
all$phylo = factor(all$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
all$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
colours
colours = read.table("../5_classify_genes/colours_v2.csv", sep = ",", comment.char = "", stringsAsFactors = F, header = T)
View(colours)
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
plot_one_genetype_against_dist <- function(gene_type, title, get_legend = F) {
## plot the number of genes shared compared to phylogenetic distance
all = edges[which(edges$Gene_class == gene_type),]
all$label_a = paste(all$ClusterA, all$ClusterB, sep = "-")
all$label_b = paste(all$ClusterB, all$ClusterA, sep = "-")
all$label = rep("", dim(all)[1])
all$label[which(all$label_a %in% distance_matrix.m$label)] = all$label_a[which(all$label_a %in% distance_matrix.m$label)]
all$label[which(all$label_b %in% distance_matrix.m$label)] = all$label_b[which(all$label_b %in% distance_matrix.m$label)]
all = all[match(distance_matrix.m$label, all$label),]
all$distance = distance_matrix.m$dist
all$Count_normalised = (all$Count - min(all$Count)) /(max(all$Count) - min(all$Count))
all$phylo = factor(all$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
all$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
p = ggplot(all, aes(x = distance, y = Count, fill = phylo)) + geom_point(size = 3, pch = 21, alpha = 0.7) +
xlab("Phylogenetic distance") + ylab("Number of shared genes") +
theme_bw(base_size = 14)  +
scale_fill_manual(values = c(brewer.pal(n=7,"Set2"),"brown","#d3d3d3"),name = "", drop = F) + ggtitle(title) +
facet_grid(. ~ name) +
theme(strip.background = element_rect(fill=max_colour),
strip.text = element_text(size=12, colour=text_colour)) + theme(legend.position = "bottom") + guides(fill=guide_legend(ncol=3,byrow=F))
if (!get_legend) {p = p + theme(legend.position = "None")}
return(p)
}
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
core
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
intermediate = plot_one_genetype_against_dist("Multi-cluster intermediate", "B")
rare = plot_one_genetype_against_dist("Multi-cluster rare", "C")
core_and_inter = plot_one_genetype_against_dist("Core and intermediate","D")
core_and_rare = plot_one_genetype_against_dist("Core and rare","E")
core_inter_rare = plot_one_genetype_against_dist("Core, intermediate and rare","F")
inter_and_rare = plot_one_genetype_against_dist("Intermediate and rare","G")
## extract the legend from the first plot
legend = as_ggplot(get_legend(core))
legend
grid.arrange(core, intermediate, rare,core_and_inter,legend,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 4)
grid.arrange(core, intermediate, rare,core_and_inter,legend,
core_inter_rare, core_and_rare, inter_and_rare, ncol = 4)
grid.arrange(core, intermediate, rare,core_and_inter,legend,
core_inter_rare, core_and_rare, inter_and_rare, rbind(c(1,2,3,4),
c(5,6,7,8)))
grid.arrange(core, intermediate, rare,core_and_inter,legend,
core_inter_rare, core_and_rare, inter_and_rare, layout_matrix = rbind(c(1,2,3,4),
c(5,6,7,8)))
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, layout_matrix = rbind(c(1,2,3,4),
c(5,6,7,8)))
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
core = core + theme(legend.position = "None")
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
plot_one_genetype_against_dist <- function(gene_type, title, get_legend = F) {
## plot the number of genes shared compared to phylogenetic distance
all = edges[which(edges$Gene_class == gene_type),]
all$label_a = paste(all$ClusterA, all$ClusterB, sep = "-")
all$label_b = paste(all$ClusterB, all$ClusterA, sep = "-")
all$label = rep("", dim(all)[1])
all$label[which(all$label_a %in% distance_matrix.m$label)] = all$label_a[which(all$label_a %in% distance_matrix.m$label)]
all$label[which(all$label_b %in% distance_matrix.m$label)] = all$label_b[which(all$label_b %in% distance_matrix.m$label)]
all = all[match(distance_matrix.m$label, all$label),]
all$distance = distance_matrix.m$dist
all$Count_normalised = (all$Count - min(all$Count)) /(max(all$Count) - min(all$Count))
all$phylo = factor(all$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
all$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
p = ggplot(all, aes(x = distance, y = Count, fill = phylo)) + geom_point(size = 3, pch = 21, alpha = 0.7) +
xlab("Phylogenetic distance") + ylab("Number of shared genes") +
theme_bw(base_size = 14)  +
scale_fill_manual(values = c(brewer.pal(n=7,"Set2"),"brown","#d3d3d3"),name = "Phylogroup of both PopPUNK clusters", drop = F) + ggtitle(title) +
facet_grid(. ~ name) +
theme(strip.background = element_rect(fill=max_colour),
strip.text = element_text(size=12, colour=text_colour)) + theme(legend.position = "bottom") + guides(fill=guide_legend(ncol=3,byrow=F))
if (!get_legend) {p = p + theme(legend.position = "None")}
return(p)
}
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
intermediate = plot_one_genetype_against_dist("Multi-cluster intermediate", "B")
rare = plot_one_genetype_against_dist("Multi-cluster rare", "C")
core_and_inter = plot_one_genetype_against_dist("Core and intermediate","D")
core_and_rare = plot_one_genetype_against_dist("Core and rare","E")
core_inter_rare = plot_one_genetype_against_dist("Core, intermediate and rare","F")
inter_and_rare = plot_one_genetype_against_dist("Intermediate and rare","G")
## extract the legend from the first plot
legend = as_ggplot(get_legend(core))
core = core + theme(legend.position = "None")
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
core + guides(colour = guide_colourbar(title.position="top", title.hjust = 0.5))
plot_one_genetype_against_dist <- function(gene_type, title, get_legend = F) {
## plot the number of genes shared compared to phylogenetic distance
all = edges[which(edges$Gene_class == gene_type),]
all$label_a = paste(all$ClusterA, all$ClusterB, sep = "-")
all$label_b = paste(all$ClusterB, all$ClusterA, sep = "-")
all$label = rep("", dim(all)[1])
all$label[which(all$label_a %in% distance_matrix.m$label)] = all$label_a[which(all$label_a %in% distance_matrix.m$label)]
all$label[which(all$label_b %in% distance_matrix.m$label)] = all$label_b[which(all$label_b %in% distance_matrix.m$label)]
all = all[match(distance_matrix.m$label, all$label),]
all$distance = distance_matrix.m$dist
all$Count_normalised = (all$Count - min(all$Count)) /(max(all$Count) - min(all$Count))
all$phylo = factor(all$phylo, c("B1","C","A","E","D","B2","F","U","Different"))
all$name = gene_type
text_colour = "white"
if (gene_type %in% c("Intermediate and rare", "Core and rare", "Cluster specific rare", "Cluster specific intermediate")) {
text_colour = "black"
}
max_colour = colours$Colour[colours$Class == gene_type]
p = ggplot(all, aes(x = distance, y = Count, fill = phylo)) + geom_point(size = 3, pch = 21, alpha = 0.7) +
xlab("Phylogenetic distance") + ylab("Number of shared genes") +
theme_bw(base_size = 14)  +
scale_fill_manual(values = c(brewer.pal(n=7,"Set2"),"brown","#d3d3d3"),name = "", drop = F) + ggtitle(title) +
facet_grid(. ~ name) +
theme(strip.background = element_rect(fill=max_colour),
strip.text = element_text(size=12, colour=text_colour)) + theme(legend.position = "bottom") + guides(fill=guide_legend(ncol=3,byrow=F))
if (!get_legend) {p = p + theme(legend.position = "None")}
return(p)
}
core = plot_one_genetype_against_dist("Multi-cluster core", "A", T)
intermediate = plot_one_genetype_against_dist("Multi-cluster intermediate", "B")
rare = plot_one_genetype_against_dist("Multi-cluster rare", "C")
core_and_inter = plot_one_genetype_against_dist("Core and intermediate","D")
core_and_rare = plot_one_genetype_against_dist("Core and rare","E")
core_inter_rare = plot_one_genetype_against_dist("Core, intermediate and rare","F")
inter_and_rare = plot_one_genetype_against_dist("Intermediate and rare","G")
## extract the legend from the first plot
legend = as_ggplot(get_legend(core))
core = core + theme(legend.position = "None")
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,
core_inter_rare, core_and_rare, inter_and_rare, nrow = 2)
core2 = plot_one_genetype_against_min_size("Multi-cluster core", "A")
intermediate2 = plot_one_genetype_against_min_size("Multi-cluster intermediate", "B")
rare2 = plot_one_genetype_against_min_size("Multi-cluster rare", "C")
core_and_inter2 = plot_one_genetype_against_min_size("Core and intermediate","D")
core_and_rare2 = plot_one_genetype_against_min_size("Core and rare","E")
core_inter_rare2 = plot_one_genetype_against_min_size("Core, intermediate and rare","F")
inter_and_rare2 = plot_one_genetype_against_min_size("Intermediate and rare","G")
grid.arrange(core2, intermediate2, rare2,legend,
core_and_inter2,
core_inter_rare2, core_and_rare2, inter_and_rare2)
grid.arrange(core2, intermediate2, rare2,legend,
core_and_inter2,
core_inter_rare2, core_and_rare2, inter_and_rare2, nrow = 2)
core = plot_one_genetype_against_dist("Multi-cluster core", "", T)
intermediate = plot_one_genetype_against_dist("Multi-cluster intermediate", "")
rare = plot_one_genetype_against_dist("Multi-cluster rare", "")
core_and_inter = plot_one_genetype_against_dist("Core and intermediate","")
core_and_rare = plot_one_genetype_against_dist("Core and rare","")
core_inter_rare = plot_one_genetype_against_dist("Core, intermediate and rare","")
inter_and_rare = plot_one_genetype_against_dist("Intermediate and rare","")
## extract the legend from the first plot
legend = as_ggplot(get_legend(core))
core = core + theme(legend.position = "None")
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,core_and_rare,
core_inter_rare,  inter_and_rare, nrow = 2)
## plot all og them
grid.arrange(core, intermediate, rare, legend, core_and_inter,core_and_rare,
core_inter_rare,  inter_and_rare, nrow = 2)
